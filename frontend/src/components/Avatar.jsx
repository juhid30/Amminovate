/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";

export function Avatar() {
  const [cursorFollow, setCursorFollow] = useState(true);
  const group = useRef();
  const userGender = JSON.parse(localStorage.getItem("user")).gender;
  const avatarModel = userGender === "Female" ? "female.glb" : "male.glb";

  const { nodes, materials } = useGLTF(`models/${avatarModel}`);

  const { animations: breathingAnimation } = useFBX(
    "/public/animations/Breathing Idle.fbx"
  );
  // const { animations: dancingAnim } = useFBX(
  //   "/public/animations/Gangnam Style.fbx"
  // );
  // const [selectedAnimation, setSelectedAnimation] = useState("");

  // const { animations: dancingAnimation } = useFBX(
  //   "animations/Gangnam Style.fbx"
  // );
  // const { animations: dancingAnimation } = useFBX("animations/Dance.fbx");

  breathingAnimation[0].name = "Breathing";
  console.log(breathingAnimation);
  // dancingAnim[0].name = "Dance";
  // dancingAnimation[0].name = "Dancing";

  const { actions } = useAnimations(breathingAnimation, group);

  useFrame((state) => {
    // if (headFollow) {
    //   group.current.getObjectByName("Neck").lookAt(state.camera.position);
    // }
    if (cursorFollow) {
      const target = new THREE.Vector3(state.pointer.x, state.pointer.y, 0.9);
      group.current.getObjectByName("Head").lookAt(target);
    }
  });

  // useFrame((state) => {
  //   if (cursorFollow) {
  //     const mouse3D = new THREE.Vector3(
  //       state.mouse.x * 2 - 1,
  //       -(state.mouse.y * 2) + 1,
  //       0.5
  //     );
  //     mouse3D.unproject(state.camera);
  //     group.current.getObjectByName("Neck").lookAt(mouse3D);
  //   }
  // });
  // const animationArray = [
  //   {
  //     id: 1,
  //     name: "Breathing",
  //   },
  //   {
  //     id: 2,
  //     name: "Dance",
  //   },
  // ];

  useEffect(() => {
    // group.current.rotation.y = 4;
    actions["Breathing"].reset().play();
    //   // if (isAboutOpen) {
    //   //   setCursorFollow(false);
    //   //   actions["Breathing"].reset().stop();
    //   //   actions["Dance"].reset().play();
    //   // }
  }, []);

  return (
    <group ref={group} dispose={null}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
      </group>
    </group>
  );
}
if (JSON.parse(localStorage.getItem("user"))) {
  const userGender = JSON.parse(localStorage.getItem("user")).gender;
  const avatarModel = userGender === "Female" ? "female.glb" : "male.glb";
  useGLTF.preload(`models/${avatarModel}`);
}
